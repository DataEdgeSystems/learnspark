package com.zhangwei.test.sequoiadb;

import java.util.Arrays;
import java.util.Collections;

import org.apache.hadoop.conf.Configurable;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapreduce.InputFormat;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;


import org.bson.BSONObject;
import org.bson.BasicBSONObject;

import scala.Tuple2;

import com.sequoiadb.hadoop.io.BSONWritable;
import com.sequoiadb.hadoop.mapreduce.SequoiadbInputFormat;
import com.sequoiadb.hadoop.mapreduce.SequoiadbOutputFormat;
import com.sequoiadb.hadoop.util.SequoiadbConfigUtil;

public class SequoiaJavaWordCount {
    
    public static void main(String[] args) {
        
        JavaSparkContext sc = new JavaSparkContext("spark://test-push-centerserver:7077", "Java Word Count-sequioaDB");
        
        Configuration config = new Configuration();
//        config.set("mongo.input.uri", "mongodb://127.0.0.1:27017/beowulf.input");
//        config.set("mongo.output.uri", "mongodb://127.0.0.1:27017/beowulf.output");
        
        config.set(SequoiadbConfigUtil.JOB_IN_COLLECTIONSPACE, "sparkcs");
        config.set(SequoiadbConfigUtil.JOB_IN_COLLECTION, "inputcl");
        config.set(SequoiadbConfigUtil.JOB_INPUT_URL, "172.16.10.71:11810,172.16.10.70:11810,172.16.10.72:11810");
        config.set(SequoiadbConfigUtil.JOB_OUTPUT_URL, "172.16.10.71:11810,172.16.10.70:11810,172.16.10.72:11810");
        
        config.set(SequoiadbConfigUtil.JOB_OUT_COLLECTIONSPACE, "sparkcs");
        config.set(SequoiadbConfigUtil.JOB_OUT_COLLECTION, "outputcl");
        
//        config.setClass(SequoiadbConfigUtil.JOB_INPUT_FORMAT, SequoiadbInputFormat.class, Configurable.class);
        
        JavaPairRDD<Object, BSONWritable> sequoiadbRDD = sc.newAPIHadoopRDD(config, SequoiadbInputFormat.class, Object.class, BSONWritable.class);
        
        // Input contains tuples of (ObjectId, BSONObject)
        JavaRDD<String> words = sequoiadbRDD.flatMap(new FlatMapFunction<Tuple2<Object, BSONWritable>, String>() {
            @Override
            public Iterable<String> call(Tuple2<Object, BSONWritable> arg) {
            	BSONObject bo = arg._2.getBson();
                Object o = bo.get("text");
                if (o instanceof String) {
                    String str = (String) o;
                    str = str.toLowerCase().replaceAll("[.,!?\n]", " ");
                    return Arrays.asList(str.split(" "));
                } else {
                    return Collections.emptyList();
                }
            }
        });

        JavaPairRDD<String, Integer> ones = words.mapToPair(new PairFunction<String, String, Integer>() {
            public Tuple2<String, Integer> call(String s) {
                return new Tuple2<>(s, 1);
            }
        });
        JavaPairRDD<String, Integer> counts = ones.reduceByKey(new Function2<Integer, Integer, Integer>() {
            public Integer call(Integer i1, Integer i2) {
                return i1 + i2;
            }
        });
        
        
        // Output contains tuples of (null, BSONObject) - ObjectId will be generated by Mongo driver if null
        JavaPairRDD<Object, BSONObject> save = counts.mapToPair(new PairFunction<Tuple2<String, Integer>, Object, BSONObject>() {
            @Override
            public Tuple2<Object, BSONObject> call(Tuple2<String, Integer> tuple) {
                BSONObject bson = new BasicBSONObject();
                bson.put("word", tuple._1);
                bson.put("count", tuple._2);
                return new Tuple2<>(null, bson);
            }
        });
        
        // Only MongoOutputFormat and config are relevant
        save.saveAsNewAPIHadoopFile("file:///bogus", Object.class, Object.class, SequoiadbOutputFormat.class, config);
        
        sc.close();
    }
    
}
